{"ast":null,"code":"var _jsxFileName = \"/Users/Kim/Documents/Dev Projects/AllergensWeb/src/App.js\";\n// import React, { useState } from \"react\";\n// import { itemList } from \"./database/itemList\";\n// import { ProductList } from \"./database/ProductList\";\n\n// function App() {\n\n//   const [filteredProductList, setProductFilteredList] = new useState(ProductList);\n\n//   const filterBySearchProduct = (event) => {\n//     // Access input value\n//     const query = event.target.value;\n//     // Create copy of item list\n//     var updatedProductList = [...ProductList];\n//     // Include all elements which includes the search query\n//     updatedProductList = updatedProductList.filter((item) => {\n//       return item.toLowerCase().indexOf(query.toLowerCase()) !== -1;\n//     });\n//     // Trigger render with updated values\n//     setProductFilteredList(updatedProductList);\n//   };\n\n//   const [filteredList, setFilteredList] = new useState(itemList);\n\n//   const filterBySearch = (event) => {\n//     // Access input value\n//     const query = event.target.value;\n//     // Create copy of item list\n//     var updatedList = [...itemList];\n//     // Include all elements which includes the search query\n//     updatedList = updatedList.filter((item ) => {\n//       return item.toLowerCase().indexOf(query.toLowerCase()) !== -1;\n//     });\n//     // Trigger render with updated values\n//     setFilteredList(updatedList);\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <div className=\"search-header\">\n//         <div className=\"search-text\">Search:</div>\n//         <input id=\"search-box\" onChange={filterBySearch} />\n//       </div>\n//       <div id=\"item-list\">\n//         <ul>\n//           {filteredList.map((item, index) => (\n//             <li key={index}>\n//               {item}\n//               </li>\n//           ))}\n//         </ul>\n//       </div>\n\n//       <div className=\"search-header\">\n//         <div className=\"search-text\">Search:</div>\n//         <input id=\"search-box\" onChange={filterBySearchProduct} />\n//       </div>\n//       <div id=\"item-list\">\n//         <ul>\n//           {filteredProductList.map((item, index) => (\n//             <li key={index}>\n//               {item}\n//               </li>\n//           ))}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 83,\n  columnNumber: 3\n}, this));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","map":{"version":3,"names":["React","ReactDOM","App","reportWebVitals","root","createRoot","document","getElementById","render"],"sources":["/Users/Kim/Documents/Dev Projects/AllergensWeb/src/App.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import { itemList } from \"./database/itemList\";\n// import { ProductList } from \"./database/ProductList\";\n\n// function App() {\n\n//   const [filteredProductList, setProductFilteredList] = new useState(ProductList);\n\n//   const filterBySearchProduct = (event) => {\n//     // Access input value\n//     const query = event.target.value;\n//     // Create copy of item list\n//     var updatedProductList = [...ProductList];\n//     // Include all elements which includes the search query\n//     updatedProductList = updatedProductList.filter((item) => {\n//       return item.toLowerCase().indexOf(query.toLowerCase()) !== -1;\n//     });\n//     // Trigger render with updated values\n//     setProductFilteredList(updatedProductList);\n//   };\n\n\n//   const [filteredList, setFilteredList] = new useState(itemList);\n\n//   const filterBySearch = (event) => {\n//     // Access input value\n//     const query = event.target.value;\n//     // Create copy of item list\n//     var updatedList = [...itemList];\n//     // Include all elements which includes the search query\n//     updatedList = updatedList.filter((item ) => {\n//       return item.toLowerCase().indexOf(query.toLowerCase()) !== -1;\n//     });\n//     // Trigger render with updated values\n//     setFilteredList(updatedList);\n//   };\n\n\n//   return (\n//     <div className=\"App\">\n//       <div className=\"search-header\">\n//         <div className=\"search-text\">Search:</div>\n//         <input id=\"search-box\" onChange={filterBySearch} />\n//       </div>\n//       <div id=\"item-list\">\n//         <ul>\n//           {filteredList.map((item, index) => (\n//             <li key={index}>\n//               {item}\n//               </li>\n//           ))}\n//         </ul>\n//       </div>\n\n//       <div className=\"search-header\">\n//         <div className=\"search-text\">Search:</div>\n//         <input id=\"search-box\" onChange={filterBySearchProduct} />\n//       </div>\n//       <div id=\"item-list\">\n//         <ul>\n//           {filteredProductList.map((item, index) => (\n//             <li key={index}>\n//               {item}\n//               </li>\n//           ))}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"mappings":";AAAA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAO,aAAa;AACpB,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAOC,eAAe,MAAM,mBAAmB;AAAC;AAEhD,MAAMC,IAAI,GAAGH,QAAQ,CAACI,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEH,IAAI,CAACI,MAAM,eACT,QAAC,KAAK,CAAC,UAAU;EAAA,uBACf,QAAC,GAAG;IAAA;IAAA;IAAA;EAAA;AAAG;EAAA;EAAA;EAAA;AAAA,QACU,CACpB;;AAED;AACA;AACA;AACAL,eAAe,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}